
" do not load defaults if ~/.vimrc is missing
let skip_defaults_vim=1

lang ru_RU.utf8
syntax enable
filetype plugin indent on

set shell=fish
set path=.:**
set encoding=utf-8
set history=1000
set errorbells
set visualbell t_vb=
set autoread
set shiftwidth=4
set tabstop=4
set expandtab
set display=truncate
set backspace=indent,eol,start
set complete=.,d,kspell
set completeopt=menu,menuone,popuphidden,noinsert
set wildmenu
set wildignorecase
set wildoptions=fuzzy,pum
set showtabline=2
set virtualedit=onemore
set selection=inclusive
set wrap
set linebreak
set showbreak=
set wrapscan
set list
set listchars=tab:»·,trail:·
set mouse=a
set mousemodel=popup
set number
set ignorecase
set smartcase
set smartindent
set smarttab
set splitright
set splitbelow
set hlsearch
set incsearch
set switchbuf=useopen,usetab,vsplit
set cursorlineopt=number
set cursorline
set showcmd
set showmode
set noswapfile
set undofile
set undodir=~/.vim/undo
set shortmess-=S
set shortmess-=C
set updatetime=500
set timeout timeoutlen=500 ttimeoutlen=10
set termguicolors
set nocompatible
set omnifunc=syntaxcomplete#Complete
set dictionary=spell
set nospell spelllang=ru,en
set foldenable foldmethod=syntax foldnestmax=3
set t_md=
set t_mb=
set t_Co=256
fixdel

let &t_SI = "\e[5 q\<Esc>]12;green\x7"
let &t_SR = "\e[5 q\<Esc>]12;magenta\x7"
let &t_EI = "\e[2 q\<Esc>]12;red\x7"

" Fix Alt Keys
for i in range(33,61)+range(63,90)+[92]+range(94,122)
  let c = i is 34 ? '\"' : i is 124 ? '\|' : nr2char(i)
  exec printf("set <M-%s>=\<Esc>%s", c, c)
  exec printf("tnoremap <silent> <M-%s> <Esc>%s", c, c)
endfor

execute system('test -e ~/.vim/undo || mkdir ~/.vim/undo')
execute system('
    \ test -e ~/.vim/autoload/plug.vim ||
    \ curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    \')

call plug#begin()
Plug 'farmergreg/vim-lastplace'
Plug 'vifm/vifm.vim'
Plug 'jamessan/vim-gnupg'
Plug 'rafi/awesome-vim-colorschemes'
call plug#end()

colorscheme deep-space

set laststatus=2
set statusline=
set statusline+=%#Icon#
set statusline+=\ 
set statusline+=%#NormalC#%{(mode()=='n')?'\ NORMAL\ ':''}
set statusline+=%#InsertC#%{(mode()=='i')?'\ INSERT\ ':''}
set statusline+=%#VisualC#%{(mode('1')=~'v')?'\ VISUAL\ ':''}
set statusline+=%#Filename#
set statusline+=\ %f
set statusline+=%#ReadOnly#
set statusline+=\ %r
set statusline+=%m
set statusline+=%=
set statusline+=%#Fileformat#
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\ [%{&fileformat}\]
set statusline+=%#Position#
set statusline+=\ [%l/%L]

let g:mapleader = '-'

nmap <Enter> i
nmap <S-q> :qa<CR>
nmap <C-q> :bd<CR>
tmap <C-q> <C-w><C-c>
nmap q     :q<CR>
nmap <Tab> <C-w>w
nmap <S-Tab> <C-w>p
tmap <S-Tab> <C-w>w
map  <C-s> :w<CR>
nnoremap s     :wall<CR>
inoremap <C-s>  <Esc>:w<CR>
nnoremap <S-s> :mksession!<CR>
inoremap <expr> <Esc> pumvisible() ? "\<Esc>"  : "\<Esc>"
cnoremap <expr> <Esc> pumvisible() ? "\<C-e>"  : "\<C-c>"
nnoremap <expr> <Esc> get(v:,'hlsearch') ? ":noh<CR>" : or(index(['','help'],&bt)<0,index(['netrw','qf'],&ft)>=0) ? ":q<CR>" : ":lclose<bar>:pclose<bar>:redraw!<CR>"
nnoremap ; q:
vmap <C-c> ""y g`< :call system("xclip -i -sel p -f \| xclip -i -sel c", trim(@"))<CR>
vmap <C-x> ""x g`<
nmap <C-v> ""gP
vmap <C-v> ""Pgvy
imap <C-v> <C-o>""gP
cmap <C-v> <C-r>=trim(@")<CR>
vmap <LeftMouse> <C-c>
nmap <expr> <RightMouse> mode('1') == 'nt' ? "\<CR>" : "\<Esc>"
inoremap <RightMouse> <Esc>
nnoremap <2-LeftMouse> i
tnoremap <RightMouse> <LeftMouse><C-w>N
tnoremap <2-LeftMouse> <CR>
nnoremap = <C-w>=
nnoremap <A-v> <C-v>
nnoremap <S-c> :term<CR>
nmap <C-d> :Lexplore<CR>
nmap <S-d> :VsplitVifm .<CR>
nmap <A-d> :bo vert term ++close vifm .<CR>
nmap <A-n> :bo vert term ++close tjournal <CR>
nmap <A-t> :bo vert term ++close taskwarrior-tui <CR>
nmap r     :redo<CR>
nmap <S-u> :u0<CR>
nmap <C-z> u
imap <C-u> <C-o>u
imap <C-z> <C-o>u
vnoremap <BS> "_d
cnoremap <expr> <CR>  pumvisible() ? "\<C-y><Space>" : "\<CR>"
nmap     <C-n> i<C-n>
inoremap <C-@>  <C-x><C-o>
nmap     <C-@> i<C-@>
inoremap <C-BS> <C-w>
inoremap <C-h>  <C-w>
nnoremap <C-h>  :execute(printf(":help %s*",expand("<cword>")))<CR>
nnoremap f /<C-r>=expand("<cword>")<CR><CR>
vnoremap f "zy<Esc>/<C-r>z<CR>
nnoremap <S-t>     :tabnew .<CR>
nnoremap + :resize +5<CR>
nnoremap _ :resize -5<CR>
nnoremap > :vertical resize +10<CR>
nnoremap < :vertical resize -10<CR>
nnoremap <C-\>          :lclose<CR><C-w>T
nnoremap <silent> <A-\> :lclose<bar>let g:curbufnr=bufnr()<bar>let g:curtabnr=max([tabpagenr()-1,1])<bar>hide<bar>exe 'tabn '.g:curtabnr<bar>exe 'vert sb '.g:curbufnr<CR>
nnoremap <silent> <A--> :lclose<bar>let g:curbufnr=bufnr()<bar>hide<bar>exe 'bel sb '.g:curbufnr<CR>
nnoremap <silent> <A-=> :lclose<bar>let g:curbufnr=bufnr()<bar>hide<bar>exe 'vert rightb sb '.g:curbufnr<CR>
noremap  <C-Right> e
noremap  <C-Left>  b
inoremap <C-Right> <C-o>e<Right>
inoremap <C-Left>  <C-o>b
noremap  <expr> <C-Up>      pumvisible() ? "\<PageUp>"     : "5k"
noremap  <expr> <C-Down>    pumvisible() ? "\<PageDown>"   : "5j"
inoremap <expr> <C-Up>      pumvisible() ? "\<PageUp>"     : "\<C-o>5k"
inoremap <expr> <C-Down>    pumvisible() ? "\<PageDown>"   : "\<C-o>5j"
noremap  <expr> <PageUp>    pumvisible() ? "\<PageUp>"     : "10k"
noremap  <expr> <PageDown>  pumvisible() ? "\<PageDown>"   : "10j"
inoremap <expr> <PageUp>    pumvisible() ? "\<PageUp>"     : "\<C-o>10k"
inoremap <expr> <PageDown>  pumvisible() ? "\<PageDown>"   : "\<C-o>10j"
nnoremap <A-Left>  :tabN<CR>
nnoremap <A-Right> :tabn<CR>
nnoremap <A-Up>    :tabmove -<CR>
nnoremap <A-Down>  :tabmove +<CR>
imap     <A-Left>  <C-o><A-Left>
imap     <A-Right> <C-o><A-Right>
imap     <A-Up>    <C-o><A-Up>
imap     <A-Down>  <C-o><A-Down>
tmap     <A-Left>  <C-w>gT
tmap     <A-Right> <C-w>gt
nnoremap <S-End>   viw
nnoremap <S-Home>  viwo
nnoremap <S-Right> ve
nnoremap <S-Left>  vb
nnoremap <S-Up>    <C-V>
nnoremap <S-Down>  <S-V>
inoremap <S-End>   <C-o>viw
inoremap <S-Home>  <C-o>viwo
inoremap <S-Right> <C-o>ve
inoremap <S-Left>  <Left><C-o>vb
inoremap <S-Up>    <C-o><C-V>
inoremap <S-Down>  <C-o><S-V>
vnoremap <S-Right> e
vnoremap <S-Left>  b
vnoremap <S-Up>    k
vnoremap <S-Down>  j
vnoremap <S-Home>  g^
vnoremap <S-End>   $
nnoremap <A-w> :set wrap!<CR>
nnoremap <A-s> :set spell!<CR>
nnoremap <A-r> :set readonly!<CR>
nnoremap <A-e> :set expandtab!<CR>
nnoremap <A-u> :set undofile!<CR>
nmap dn :normal ]c<CR>
nmap dg :diffget<CR> dn
nmap dp :diffput<CR> dn
nmap dr :diffget RE<CR>  " - get from REMOTE
nmap db :diffget BA<CR>  " - get from BASE
nmap dl :diffget LO<CR>  " - get from LOCAL
inoremap <C-t> <C-R>=strftime('%Y-%m-%d %H:%M:%S')<C-M>

autocmd! ColorScheme *
    \  hi clear SpellBad
    \| hi SpellBad cterm=underline,italic gui=undercurl,italic
    \| hi clear SpellCap
    \| hi clear Todo

doautocmd ColorScheme

augroup defaults
    au!
    au BufWinEnter * doau FileType
    au TerminalWinOpen * wincmd L | vert resize 80
    au BufWinEnter * if &ft == 'help' | wincmd L | setlocal winfixwidth | vert resize 80 | endif
    au VimEnter * if &diff == 1 | setlocal readonly nomodifiable | exe "silent! normal! gg ]c zo" | endif
    au FileType netrw nmap <buffer> <2-LeftMouse> <CR>
    au FileType gitcommit setlocal spell
augroup END

let g:auto_complete = 0
if g:auto_complete == 1
    augroup auto_complete
        au!
        au CursorHoldI *  pumvisible() == 0 && &bt == '' && getcmdtype() == '' && &diff == 0
                \ && getline('.')[col('.')-2] =~ '[a-z]' | silent! call feedkeys("\<C-x>\<C-o>") | endif
    augroup END
endif

let g:netrw_liststyle = 3
let g:netrw_preview = 1
let g:netrw_keepdir = 1
let g:netrw_usetab = 1
let g:netrw_browse_split = 2
let g:netrw_altv = 1
let g:netrw_alto = 0
let g:netrw_silent = 1
let g:netrw_wiw = 10
let g:netrw_fastbrowse = 1
let g:netrw_mousemaps = 0
let g:netrw_banner = 0
let g:netrw_sort_options = 'i'
let g:netrw_list_hide = '^\.+'

let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_extensions = ['tag', 'buffertag', 'dir', 'undo', 'changes', 'mixed']
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/](\.git|\.hg|\.svn|\.idea|node_modules|var|tmp|target|build)$',
    \ 'file': '\v\.(exe|so|dll|lock)$',
    \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
    \ }
let g:ctrlp_use_caching = 60
let g:ctrlp_clear_cache_on_exit = 1
let g:ctrlp_show_hidden = 1
let g:ctrlp_by_filename = 0
let g:ctrlp_regexp = 1
let g:ctrlp_mruf_relative = 1
let g:ctrlp_mruf_case_sensitive = 0
let g:ctrlp_working_path_mode = 'arw'
let g:ctrlp_open_new_file = 'v'
let g:ctrlp_open_multiple_files = 'v'
let g:ctrlp_arg_map = 1
let g:ctrlp_tabpage_position = 'ac'
let g:ctrlp_reuse_window = ''
let g:ctrlp_switch_buffer = 'ev'
let g:ctrlp_lazy_update = 0
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:100'
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-o>'],
    \ 'AcceptSelection("t")': ['<c-t>', '<RightMouse>'],
    \ 'AcceptSelection("v")': ['<cr>', '<c-v>', '<2-LeftMouse>'],
    \ }

let g:gitgutter_enabled = 1
let g:gitgutter_use_location_list = 1
let g:gitgutter_highlight_lines = 0
let g:gitgutter_sign_priority = 3
let g:gitgutter_override_sign_column_highlight = 1
let g:gitgutter_close_preview_on_escape = 1
let g:gitgutter_use_location_list = 1

function! LoadSessionDefault()
   if argc() == 0 && &diff == 0 && getenv('VIM_TERMINAL') == v:null && filereadable('Session.vim')
       source Session.vim
   endif
endfunction

silent! call LoadSessionDefault()

